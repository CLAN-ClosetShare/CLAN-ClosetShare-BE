generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username     String?   @unique
  name        String
  email       String   @unique
  password    String
  avatar      String?
  bio          String?
  phone_number  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status    USER_STATUS @default(UNVERIFIED)
  role    USER_ROLE   @default(USER)
  sessions  Session[]
  shop_staffs ShopStaff[]
  addresses Address[]

  @@map("users")
}

model Address {
  id       String   @id @default(uuid())
  user_id    String
  receiver_name   String
  phone_number     String
  address    String
  province_id   Int
  ward_id    Int
  is_default  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user     User     @relation(fields: [user_id], references: [id])

  @@map("addresses")
}

enum USER_STATUS {
  UNVERIFIED
  VERIFIED
  BANNED
}

enum USER_ROLE {
  USER
  MOD
  ADMIN
}

model Session {
  id        String   @id @default(uuid())
  user_id    String
  hash    String   @unique
  user      User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sessions")
}

enum SHOP_STATUS {
  UNVERIFIED
  VERIFIED
  SUSPENDED
}

model Shop {
  id       String   @id @default(uuid())
  name      String
  description String?
  address   String
  phone_number String?
  email     String?
  avatar    String?
  background String?
  rating   Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status   SHOP_STATUS @default(UNVERIFIED)
  staffs   ShopStaff[]
  products Product[]

  @@map("shops")
}

model ShopStaff {
  id       String   @id @default(uuid())
  user_id    String
  shop_id    String
  joined_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id])
  shop      Shop     @relation(fields: [shop_id], references: [id])
  notes    String?
  role     SHOP_ROLE @default(STAFF)
  status   SHOP_STAFF_STATUS @default(ACTIVE)

  @@map("shop_staffs")
}

enum SHOP_ROLE {
  STAFF
  OWNER
}

enum SHOP_STAFF_STATUS {
  ACTIVE
  REMOVED
}

model Product {
  id       String   @id @default(uuid())
  name     String
  description String?
  shop_id   String
  filter_props ProductByFilterProp[]
  status   PRODUCT_STATUS @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shop     Shop     @relation(fields: [shop_id], references: [id])
  type     PRODUCT_TYPE
  variants Variant[]

  @@map("products")
}

enum PRODUCT_TYPE {
  SALE
  RENT
}

model Variant {
  id      String   @id @default(uuid())
  product_id String
  name     String
  type     String
  stock    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product  Product  @relation(fields: [product_id], references: [id])
  status   PRODUCT_STATUS @default(ACTIVE)
  images String[]
  pricings ProductPricing[]
  orders   OrderDetail[]

  @@map("variants")
}

model ProductPricing {
  id       String   @id @default(uuid())
  variant_id String
  variant  Variant  @relation(fields: [variant_id], references: [id])
  price    Float
  start_date DateTime @default(now())
  end_date DateTime?
  status   PRODUCT_PRICING_STATUS @default(ACTIVE)
  created_at DateTime @default(now())

  @@map("product_pricings")
}

enum PRODUCT_PRICING_STATUS {
  INACTIVE
  ACTIVE
}

enum PRODUCT_STATUS {
  INACTIVE
  ACTIVE
}

model Filter {
  id      String   @id @default(uuid())
  name    String   @unique
  description String?
  status  FILTER_STATUS @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  props   FilterProp[]

  @@map("filters")
}

model FilterProp {
  id      String   @id @default(uuid())
  filter_id String
  name    String
  description   String?
  filter  Filter   @relation(fields: [filter_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status  FILTER_STATUS @default(ACTIVE)
  products ProductByFilterProp[]

  @@map("filter_props")
}

model ProductByFilterProp {
  id       String   @id @default(uuid())
  product_id String
  filter_prop_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product   Product  @relation(fields: [product_id], references: [id])
  filterProp FilterProp @relation(fields: [filter_prop_id], references: [id])

  @@map("product_by_filter_props")
}

enum FILTER_STATUS {
  INACTIVE
  ACTIVE
}

model Order {
  id       String   @id @default(uuid())
  orderCode  Int    @unique @default(autoincrement())
  user_id    String
  total_value   Float
  discount_value  Float @default(0)
  final_value   Float
  payment_method PAYMENT_METHOD
  type     ORDER_TYPE
  receiver_name  String
  phone_number   String
  address    String
  province_id   Int
  ward_id    Int
  status   ORDER_STATUS @default(PENDING)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order_details OrderDetail[]

  @@map("orders")
}

enum PAYMENT_METHOD {
  BANK_TRANSFER
  COD
}

enum ORDER_TYPE {
  SALE
  RENT
}

enum ORDER_STATUS {
  PENDING
  DELIVERING
  DELIVERED
  CANCELED
  RETURNED
  SUCCESS
}

model OrderDetail {
  id       String   @id @default(uuid())
  order_id   String
  variant_id String
  quantity   Int
  price    Float
  discount_value Float @default(0)
  rental_start_date DateTime?
  rental_end_date DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  order    Order    @relation(fields: [order_id], references: [id])
  variant  Variant  @relation(fields: [variant_id], references: [id])

  @@map("order_details")
}
