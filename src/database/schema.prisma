generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username     String?   @unique
  name      String
  email    String   @unique
  password String
  avatar_url  String?
  bio       String?
  phone_number  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status    USER_STATUS @default(UNVERIFIED)
  role    USER_ROLE   @default(USER)
  sessions  Session[]
  shop_staffs ShopStaff[]

  @@map("users")
}

enum USER_STATUS {
  UNVERIFIED
  VERIFIED
  BANNED
}

enum USER_ROLE {
  USER
  MOD
  ADMIN
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  hash    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sessions")
}

enum SHOP_STATUS {
  UNVERIFIED
  VERIFIED
  SUSPENDED
}

model Shop {
  id       String   @id @default(uuid())
  name      String
  description String?
  address   String
  phone_number String?
  email     String?
  avatar_url  String?
  background_url String?
  rating   Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status   SHOP_STATUS @default(UNVERIFIED)
  staffs   ShopStaff[]
  products Product[]

  @@map("shops")
}

model ShopStaff {
  id       String   @id @default(uuid())
  userId    String
  shopId    String
  joined_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
  notes    String?
  role     SHOP_ROLE @default(STAFF)
  status   SHOP_STAFF_STATUS @default(ACTIVE)

  @@map("shop_staffs")
}

enum SHOP_ROLE {
  STAFF
  OWNER
}

enum SHOP_STAFF_STATUS {
  ACTIVE
  REMOVED
}

model Product {
  id       String   @id @default(uuid())
  name     String
  description String?
  shopId   String
  filterProps ProductByFilterProp[]
  status   PRODUCT_STATUS @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  shop     Shop     @relation(fields: [shopId], references: [id])
  variants Variant[]

  @@map("products")
}

enum PRODUCT_TYPE {
  SALE
  RENT
}

model Variant {
  id      String   @id @default(uuid())
  productId String
  name     String
  type     String
  stock    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product  Product  @relation(fields: [productId], references: [id])
  status   PRODUCT_STATUS @default(ACTIVE)
  image_urls String[]
  pricings ProductPricing[]

  @@map("variants")
}

model ProductPricing {
  id       String   @id @default(uuid())
  variantId String
  variant  Variant  @relation(fields: [variantId], references: [id])
  price    Float
  start_date DateTime @default(now())
  end_date DateTime?
  status   PRODUCT_PRICING_STATUS @default(ACTIVE)
  created_at DateTime @default(now())

  @@map("product_pricings")
}

enum PRODUCT_PRICING_STATUS {
  INACTIVE
  ACTIVE
}

enum PRODUCT_STATUS {
  INACTIVE
  ACTIVE
}

model Filter {
  id      String   @id @default(uuid())
  name    String   @unique
  description String?
  status  FILTER_STATUS @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  props   FilterProp[]

  @@map("filters")
}

model FilterProp {
  id      String   @id @default(uuid())
  filterId String
  name    String
  description   String?
  filter  Filter   @relation(fields: [filterId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status  FILTER_STATUS @default(ACTIVE)
  products ProductByFilterProp[]

  @@map("filter_props")
}

model ProductByFilterProp {
  id       String   @id @default(uuid())
  productId String
  filterPropId String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  filterProp FilterProp @relation(fields: [filterPropId], references: [id])

  @@map("product_by_filter_props")
}

enum FILTER_STATUS {
  INACTIVE
  ACTIVE
}